name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    services:
      ipfs:
        image: ipfs/kubo:latest
        ports:
          - 5001:5001
          - 8080:8080
        options: >-
          --health-cmd "ipfs id"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Wait for IPFS
        run: |
          timeout 30s bash -c 'until curl -s http://localhost:5001/api/v0/id > /dev/null; do sleep 1; done'

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        env:
          IPFS_API: http://localhost:5001

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Check code formatting
        run: |
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "The following files are not formatted correctly:"
            echo "$unformatted"
            exit 1
          fi

  vet:
    name: Go Vet
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Run go vet
        run: go vet ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Build
        run: |
          GOOS=linux GOARCH=amd64 go build -v ./...
          GOOS=darwin GOARCH=amd64 go build -v ./...
          GOOS=windows GOARCH=amd64 go build -v ./...

  verify:
    name: Verify Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Verify go.mod
        run: go mod verify

      - name: Check for tidiness
        run: |
          go mod tidy
          git diff --exit-code -- go.mod go.sum

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Run static checks
        run: |
          # Check for unused exported identifiers
          go vet -unusedresult ./...
          # Check for suspicious constructs
          go vet -stdmethods ./...
          # Check for common mistakes
          go vet -composites ./...
          # Check for unreachable code
          go vet -unreachable ./...

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check file permissions
        run: |
          # Find files with overly permissive permissions (readable/writable by others)
          bad_perms=$(find . -type f -perm /o=rwx -not -path "./.git/*")
          if [ -n "$bad_perms" ]; then
            echo "Error: Files with unsafe permissions found:"
            echo "$bad_perms"
            exit 1
          fi

      - name: Check for large files
        run: |
          # Find files larger than 10MB
          large_files=$(find . -type f -size +10M -not -path "./.git/*")
          if [ -n "$large_files" ]; then
            echo "Error: Large files found:"
            echo "$large_files"
            exit 1
          fi

      - name: Check for sensitive files
        run: |
          # Check for common sensitive file patterns
          sensitive_patterns=('.env' '*.pem' '*.key' '*_rsa' '*_dsa' '*.p12' '*.pfx')
          for pattern in "${sensitive_patterns[@]}"; do
            if find . -name "$pattern" -not -path "./.git/*" | grep -q .; then
              echo "Error: Potentially sensitive files found matching pattern: $pattern"
              exit 1
            fi
          done
